name: Pipeline

on: [push, pull_request, workflow_dispatch]

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        os: [ ubuntu-20.04 ]
    name: Lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: psf/black@stable
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]
        os: [ ubuntu-20.04, windows-2019 ]
    name: Test
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: dmitry-shibanov/setup-python@v-dmshib/add-cache-support
        with:
          python-version: ${{ matrix.python-version }}
          cache: pipenv
      - run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv==2021.5.29
          pipenv install --dev
      - run: |
          PY_VERSION=`echo ${{ matrix.python-version }} | tr -d "."`
          pipenv run "test${PY_VERSION}"
        if: ${{ contains(matrix.os, 'ubuntu') }}
      - run: |
          $PY_VERSION = "${{ matrix.python-version }}" -replace "[.]", ""
          pipenv run reset
          pipenv run "test${PY_VERSION}"
        if: ${{ contains(matrix.os, 'windows') }}
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  scan:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        os: [ ubuntu-20.04 ]
    name: Scan
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: dmitry-shibanov/setup-python@v-dmshib/add-cache-support
        with:
          python-version: ${{ matrix.python-version }}
          cache: pipenv
      - run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv==2021.5.29
          pipenv install --dev
      - uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --fail-on=upgradable
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        os: [ ubuntu-20.04 ]
    name: Build
    needs: [test, scan]
    steps:
      - uses: actions/checkout@v2
      - uses: dmitry-shibanov/setup-python@v-dmshib/add-cache-support
        with:
          python-version: ${{ matrix.python-version }}
          cache: pipenv
      - run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv==2021.5.29
          pipenv install --dev
      - run: |
          pipenv run build
      - uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            dist/*.tar.gz
            dist/*.whl
#   release:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         python-version: [ 3.9 ]
#         os: [ ubuntu-20.04 ]
#     name: Release
#     needs: build
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-python@v2
#         with:
#           python-version: ${{ matrix.python-version }}
#       - uses: actions/download-artifact@v2
#         with:
#           name: build-artifacts
#           path: dist/
#       - run: |
#           python -m pip install --upgrade pip
#           python -m pip install --upgrade pipenv==2021.5.29
#           pipenv install --dev
#       - run: |
#           pipenv run release --pypi-test --noop
#         env:
#           TWINE_USERNAME: ${{ secrets.PYPI_USERNAME_TEST }}
#           TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD_TEST }}
#       - run: |
#           pipenv run release --noop
#         env:
#           TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#           TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#         if: startsWith(github.ref, 'refs/tags/')
